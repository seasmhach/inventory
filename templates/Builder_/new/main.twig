<?php
{% include 'license.twig' %}

namespace Builder;
{% if references is not empty %}
use Builder\{{ '{' }}Base, {% for reference in references %}{{ reference }}{% if false == loop.last %}, {% endif %}{% endfor %}{{ '}' }};
{% endif %}
use Nehemiah\DB;
use PDO;

class {{ table.namespace }} extends Base {
	use DB;
	
	const ASSIGN = '1';
	const INCREMENT = '2';
	const DECREMENT = '3';
	
	/** @var string MySQL table name */
	protected $table = '{{ table_name }}';
	
	/** @var string MySQL table alias */
	protected $alias = '{{ table_name }}';
	
	/** @var array Alias/Column pairs to be used in SELECT statements */
	protected $list = [];
	
	/** @var array Column/Value pairs to be set in a UPDATE or CREATE statement */
	protected $columns = [];
	
	/** @var array Placeholder/Value pairs */
	protected $parameters = [];
	
	/** @var array Conditions on which the WHERE clause will be build */
	protected $where = [];
	
	/** @var array Joined objects */
	protected $joins = [];
	
	/** @var array Columns by which to group */
	protected $group = [];
	
	/** @var string|null MySQL Limit clause */
	protected $limit = null;
	
	/** @var array Order by columns */
	protected $order = [];
	
	public static function read({% for column_name, column in table.columns if column.pk == true %}{{ column.data_type }} ${{ column_name }}, {% endfor %}array $columns = []) {
		${{ table_name }} = new self;

		foreach ($columns as $column) {
			${{ table_name }}->list_add($column);
		}
		
{% for column in table.primary_key %}
		${{ table_name }}->{{ column }}_is(${{ column }});
{% endfor %}
		
		if (1 === ${{ table_name }}->select()) {
			return ${{ table_name }}->current();
		}
	}
	
	/**
	 * @param string $alias Optional Alias to use while querying this table
	 */
	public function __construct(string $alias = '{{ table_name }}') {
		$this->alias = $alias;
	}

{% include 'set.twig' %} {# Column value setters #}
{% include 'list.twig' %} {# Set the list of a SELECT statement #}
{% include 'where.twig' %} {# Where clause builder #}
{% include 'join.twig' %} {# Joins #}
{% include 'group.twig' %} {# Joins #}
{% include 'order.twig' %} {# Joins #}
	public function collect() {
		$list = $this->list;
		$columns = $this->columns;
		$where = $this->where;
		$parameters = $this->parameters;
		$joins = [];
		$group = $this->group;
		$order = $this->order;
		
		foreach ($this->joins as $join) {
			$joins[] = (is_array($join)) ? $join['sql'] : $join;
		}
		
		foreach ($this->joins as $join) {
			if (is_array($join)) {
				$information = $join['builder']->collect();

				$list = array_merge($list, $information['list']);
				$columns = array_merge($columns, $information['columns']);
				$where = array_merge($where, $information['where']);
				$parameters = array_merge($parameters, $information['parameters']);
				$joins = array_merge($joins, $information['joins']);
				$group = array_merge($group, $information['group']);
				$order = array_merge($order, $information['order']);
			}
		}
	
		return [
			'list' => $list,
			'columns' => $columns,
			'where' => $where,
			'parameters' => $parameters,
 			'joins' => $joins,
			'group' => $group,
			'order' => $order,
		];
	}
	
	public function limit(int $rows, int $offset = 0) {
		$this->limit = "LIMIT $rows OFFSET $offset";
	}
	
	public function select() {
		$information = $this->collect();		
		$pdo = $this->pdo();
		
		$sql = "SELECT\n\t";
		$sql .= (count($information['list'])) ? implode(",\n\t", $information['list']) : '*';
		$sql .= "\nFROM `$this->table` AS `$this->alias`";
		
		if (count($information['joins'])) {
			$sql .= "\n" . implode("\n", $information['joins']);
		}
		
		if (count($information['where'])) {
			$sql .= "\nWHERE\n\t" . implode("\nAND\n\t", $information['where']);
		}
		
		if (count($information['group'])) {
			$sql .= "\nGROUP BY\n\t";
			$sql .= implode(",\n\t", $information['group']);
		}
		
		if (count($information['order'])) {
			$sql .= "\nORDER BY\n\t";
			$sql .= implode(",\n\t", $information['order']);
		}
		
		if ($this->limit) {
			$sql .= "\n$this->limit";
		}
		
		$statement = $pdo->prepare($sql);
		
		if (true === $statement->execute($information['parameters'])) {
			while ($result = $statement->fetch(PDO::FETCH_ASSOC)) {
				$this->append($result);
			}
			
			return (int) $statement->rowCount();
		}
		
		return false;
	}
	
	public function insert(bool $return_insert_id = true) {
		$information = $this->collect();		
		$pdo = $this->pdo();
		
		$sql = "INSERT INTO `$this->table`";
		$sql .= "\n\t(`" . implode('`, `', array_keys($information['columns'])) . "`)";
		$sql .= "\nVALUES";
		$sql .= "\n\t(:" . implode(", :", array_keys($information['columns'])) . ")";
		
		$statement = $pdo->prepare($sql);
		
		foreach ($information['columns'] as $column_name => $column) {		
			if (is_null($column['value'])) {
				$statement->bindValue(':' . $column_name, null, PDO::PARAM_INT);
			} else {
				$statement->bindValue(':' . $column_name, $column['value']);
			}
		}
		
		if (true === $statement->execute()) {
			$this->columns = [];

			if (true === $return_insert_id) {
				return (int) $pdo->lastInsertId();
			}
			
			return true;
		}
		
		return false;
	}
	
	public function sql() {
		$information = $this->collect();
		
		$sql = "SELECT\n\t";
		$sql .= (count($information['list'])) ? implode(",\n\t", $information['list']) : '*';
		$sql .= "\nFROM `$this->table` AS `$this->alias`";
		
		if (count($information['joins'])) {
			$sql .= "\n" . implode("\n", $information['joins']);
		}
		
		if (count($information['where'])) {
			$sql .= "\nWHERE\n\t" . implode("\nAND\n\t", $information['where']);
		}
		
		if (count($information['group'])) {
			$sql .= "\nGROUP BY\n\t";
			$sql .= implode(",\n\t", $information['group']);
		}
		
		if ($this->limit) {
			$sql .= "\n$this->limit";
		}
		
		return $sql;
	}

	protected function add_parameter(string $column, $value) {
		$placeholder = count($this->parameters) . '_' . $this->alias . '_' . $column;
		$this->parameters[$placeholder] = $value;
		
		return ':' . $placeholder;
	}
}